from aiogram import types
import os
import re
import csv
from openpyxl import load_workbook
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command

from login import login_user, is_user_logged_in, is_phone_logged_in, get_logged_in_phone, logout_user
from login import is_valid_phone_number, check_user_in_db, check_password_in_db
from database import check_tracking_status, get_tracking_status, get_tracking_arriveDate, get_track_link
from database import link_track_toPhone, myOrderList, get_admin_code, save_to_db, save_new_user_db, delete_user_db, export_user_data, update_tracking_status, notify_users_about_arrivals, delete_from_db

class Form(StatesGroup):
    phone_number = State()
    password = State()
    check_tracking = State()
    adminPage = State()
    updateList = State()
    setName = State()
    setNumber = State()
    setPassword = State()
    deleteUser = State()
    changeStatus = State()
    deleteList = State()
    admin = State()

# Start command: Check if user is already logged in or ask for credentials
async def start(update: types.Message):
    uid = update.from_user.id

    if await is_user_logged_in(uid):
        phone_number = await get_logged_in_phone(uid)
        keyboard = [
            ["üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", "üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã"], 
            ["üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", "üîô –í—ã–π—Ç–∏"]
            ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.answer(f"‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ {phone_number}.", reply_markup=reply_markup)
        return

    await update.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    await Form.phone_number.set()

# Handle phone number input: Validate phone number and check if it exists in the database
async def handle_phone_number(update: types.Message, state: FSMContext):
    phone_number = update.text.strip()

    if phone_number == "/admin_page": await Form.admin.set()

    if not await is_valid_phone_number(phone_number):
        await update.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    if not await check_user_in_db(phone_number):
        await update.answer("‚ö†Ô∏è –í –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @justsherozz")
        return

    if await is_phone_logged_in(phone_number):
        await update.answer("üö´ –≠—Ç–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ –≤–æ—à–ª–∞ –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(phone_number=phone_number)
    await update.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await Form.password.set()

# Handle password input: Validate password and log the user in if correct
async def handle_password(update: types.Message, state: FSMContext):
    password = update.text.strip()
    phone_number = (await state.get_data())['phone_number']

    if not await check_password_in_db(phone_number, password):
        await update.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞...")
        await Form.phone_number.set()
        return

    await login_user(update.from_user.id, phone_number)
    keyboard = [
            ["üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", "üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã"], 
            ["üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", "üîô –í—ã–π—Ç–∏"]
            ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
    await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    await state.finish()

# Logout command: Log the user out when they send /logout or press 'üîô –í—ã–π—Ç–∏' button
async def logout(update: types.Message):
    uid = update.from_user.id

    if await is_user_logged_in(uid):
        await logout_user(uid)
        await update.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=ReplyKeyboardRemove())
    else:
        await update.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")

# When user presses "üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É" button, hide buttons and ask for tracking code
async def check_trackCodeMessage(update: types.Message):
    uid = update.from_user.id

    if not await is_user_logged_in(uid):
        await update.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    # Hide buttons and ask for tracking code
    keyboard = [["–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    await Form.check_tracking.set()

# Check track code when the user sends a tracking code
async def check_trackCode(update: types.Message, state: FSMContext):
    track_code = update.text.strip()
    uid = update.from_user.id  # Get user ID
    
    if track_code == "–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥":
        keyboard = [
            ["üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", "üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã"], 
            ["üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", "üîô –í—ã–π—Ç–∏"]
            ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
        await state.finish()
    else:
        if not await check_tracking_status(track_code):
            await update.answer("‚ùå –ö–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
            await Form.check_tracking.set()  
            return

        # Store track_code and uid in state
        await state.update_data(track_code=track_code, uid=uid)

        # Get additional tracking info
        track_status = await get_tracking_status(track_code)
        track_arriveDate = await get_tracking_arriveDate(track_code)

        date_format = "%d.%m.%Y"
        date_object = datetime.strptime(track_arriveDate, date_format)
        new_date = date_object + timedelta(days=25)

        track_arriveDateTJ = new_date.strftime("%d.%m.%Y")

        if track_status == 'active': track_status = '–ü—Ä–∏–±—ã–ª–æ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥ –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ.'
        if track_status == 'arrived': track_status = '–¢–æ–≤–∞—Ä –ø—Ä–∏–±—ã–ª –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ. –ï—Å–ª–∏ –º—ã –≤–∞–º –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–∑–≤–æ–Ω–∏–ª–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'

        keyboard = [
            ["üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", "üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã"], 
            ["üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", "üîô –í—ã–π—Ç–∏"]
            ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫-–∫–æ–¥–∞: {track_status}\nüìÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ: {track_arriveDate}\nüìÖ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥ –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ: ~ {track_arriveDateTJ}", reply_markup=reply_markup)
        if await get_track_link(track_code) == "unlinked":
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ Yes", callback_data="link_track_yes"),
                InlineKeyboardButton("‚ùå No", callback_data="link_track_no")
            )
            await update.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫ –∫ —Å–≤–æ–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É?", reply_markup=keyboard)

        await state.set_state(None)  # Instead of await state.finish()

# Callback handler for "Yes" button
async def link_track_yes(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    track_code = data.get("track_code")
    uid = data.get("uid")

    phone_number = await get_logged_in_phone(uid)

    await link_track_toPhone(track_code, phone_number, uid)
    await callback_query.message.edit_text("‚úÖ –ö–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É!")

# Callback handler for "No" button
async def link_track_no(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("‚ùå –ö–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω.")

# My Orders button
async def myOrders(update: types.Message):
    uid = update.from_user.id

    if await is_user_logged_in(uid):
        myList = await myOrderList(uid)  # Await the result of the async function

        if myList:
            tracking_codes = "\n".join(f"`{row[0]}`" for row in myList)  # Format each line in monospace
            message_text = f"üì¶ *–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É):*\n\n{tracking_codes}"
        else:
            message_text = "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        await update.answer(
    message_text,
    parse_mode='markdown'
)
    else:
        await update.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")

# Admin Login
async def admin(update: types.Message):

    # Hide buttons and ask for tracking code
    await update.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:", reply_markup=ReplyKeyboardRemove())
    await Form.adminPage.set()

# Admin Page
async def adminPage(update: types.Message, state: FSMContext):
    secret_code = update.text.strip()

    if not await get_admin_code(secret_code):
        await update.answer("‚ùå Wrong secret code. Try again...")
        return
        
    keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
    await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    await state.finish()

# –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤ Message
async def updatePage(update: types.Message, state: FSMContext):
    keyboard = [["–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤:", reply_markup=reply_markup)
    await Form.updateList.set()

async def cancel_task(update: types.Message, state: FSMContext):
    keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    await state.finish()

async def updateList(update: types.Message, state: FSMContext):
    from bot import bot  # Import bot inside function to avoid circular import

    # ‚úÖ If user sends unsupported content (photo, video, location, etc.), ignore it
    if update.content_type not in [ContentType.DOCUMENT, ContentType.TEXT]:
        print(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {update.content_type}")
        await update.reply("‚ö†Ô∏è –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
        return

    # ‚úÖ If user sends text instead of file
    if update.content_type == ContentType.TEXT:
        user_text = update.text.lower()
        print(f"üìù User sent text: {user_text}")

        if user_text == "–æ—Ç–º–µ–Ω–∞/–≤—ã—Ö–æ–¥":
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()
        else:
            await update.reply("‚ö†Ô∏è –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
        return  

    # ‚úÖ If user sends an Excel document
    document = update.document
    file_name = document.file_name.lower()
    allowed_extensions = [".xls", ".xlsx", ".csv"]

    if not any(file_name.endswith(ext) for ext in allowed_extensions):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_name}")
        await update.reply("‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xls, .xlsx, .csv). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª!")
        return  

    print(f"üìÇ Valid Excel file received: {file_name}")

    # ‚úÖ Download the file
    file_id = document.file_id
    file = await bot.get_file(file_id)

    folder_path = "temp_cargo/"
    os.makedirs(folder_path, exist_ok=True)  # Ensure folder exists
    file_path = os.path.join(folder_path, file_name)

    await bot.download_file(file.file_path, file_path)
    print(f"‚úÖ File downloaded: {file_path}")

    # ‚úÖ Process the Excel file
    try:
        extracted_data = []
        
        if file_name.endswith(".xlsx"):
            wb = load_workbook(filename=file_path, data_only=True)
            sheet = wb.active
            
            headers = [cell.value for cell in sheet[1]]  # Read first row as headers
            if "–¢—Ä–µ–∫-–∫–æ–¥—ã" not in headers or "–ö–æ–¥ –Ω–æ–º–µ—Ä" not in headers:
                await update.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Excel! –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã ‚Äò–¢—Ä–µ–∫-–∫–æ–¥—ã‚Äô –∏ ‚Äò–ö–æ–¥ –Ω–æ–º–µ—Ä‚Äô.")
                return
            
            track_col = headers.index("–¢—Ä–µ–∫-–∫–æ–¥—ã") + 1
            code_col = headers.index("–ö–æ–¥ –Ω–æ–º–µ—Ä") + 1
            
            for row in sheet.iter_rows(min_row=2, values_only=True):
                tracking_code = str(row[track_col - 1]).strip() if row[track_col - 1] else ""
                cargo_code = str(row[code_col - 1]).strip() if row[code_col - 1] else ""
                
                if tracking_code and cargo_code and "nan" not in tracking_code.lower():
                    match = re.match(r"^TJ-(\d+)-(\d+)$", cargo_code)
                    if match:
                        day = match.group(1)
                        arrival_date = f"{int(day):02d}.{datetime.now().month:02d}.{datetime.now().year}"
                        extracted_data.append((tracking_code, arrival_date))
            
        elif file_name.endswith(".csv"):
            with open(file_path, encoding='utf-8') as f:
                reader = csv.DictReader(f)
                if "–¢—Ä–µ–∫-–∫–æ–¥—ã" not in reader.fieldnames or "–ö–æ–¥ –Ω–æ–º–µ—Ä" not in reader.fieldnames:
                    await update.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV! –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã ‚Äò–¢—Ä–µ–∫-–∫–æ–¥—ã‚Äô –∏ ‚Äò–ö–æ–¥ –Ω–æ–º–µ—Ä‚Äô.")
                    return
                
                for row in reader:
                    tracking_code = row.get("–¢—Ä–µ–∫-–∫–æ–¥—ã", "").strip()
                    cargo_code = row.get("–ö–æ–¥ –Ω–æ–º–µ—Ä", "").strip()
                    
                    if tracking_code and cargo_code and "nan" not in tracking_code.lower():
                        match = re.match(r"^TJ-(\d+)-(\d+)$", cargo_code)
                        if match:
                            day = match.group(1)
                            arrival_date = f"{int(day):02d}.{datetime.now().month:02d}.{datetime.now().year}"
                            extracted_data.append((tracking_code, arrival_date))
        
        # ‚úÖ Save only unique data
        if extracted_data:
            await save_to_db(extracted_data)
            unique_count = len(extracted_data)
            await update.reply(f"‚úÖ {unique_count} –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã!")
            keyboard = [
                ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
                ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
                ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
                ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()
        else:
            await update.reply("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —Ç—Ä–µ–∫–æ–≤.")
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()

        # ‚úÖ Delete file after processing
        os.remove(file_path)
    
    except Exception as e:
        print(f"‚ùå Error processing Excel file: {e}")
        await update.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def newUser(update: types.Message):
    keyboard = [["–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
    await Form.setName.set()

async def setName(update: types.Message, state: FSMContext):
    name = update.text.strip()

    if name == "–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥":
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()
    else:
        await state.update_data(name=name)
        await update.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n(–ü—Ä–∏–º–µ—Ä: 987654321)")
        await Form.setNumber.set()

async def setNumber(update: types.Message, state: FSMContext):
    number = update.text.strip()

    if number == "–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥":
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()
    else:

        # ‚úÖ Check if input is exactly 9 digits
        if re.fullmatch(r"\d{9}", number):
            await state.update_data(number=number)
            await update.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º—É–º: 8 —Ü–∏—Ñ—Ä):")
            await Form.setPassword.set()
        else:
            await update.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ **9 —Ü–∏—Ñ—Ä**.")
            return

async def setPassword(update: types.Message, state: FSMContext):
    password = update.text.strip()

    if password == "–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥":
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()
    else:
        if re.fullmatch(r".{8,}", password):
            data = await state.get_data()
            name = data.get("name")
            number = data.get("number")

            # ‚úÖ Save to database
            result = await save_new_user_db(name, number, password)
            await update.answer(result)
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
        
            # ‚úÖ Clear FSM state after saving
            await state.finish()
        else:
            await update.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ **8 —Å–∏–º–≤–æ–ª–æ–≤**.")
            return
        
async def deleteUser(update: types.Message):
    keyboard = [["–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
    await Form.deleteUser.set()

async def deleteUserDB(update: types.Message, state: FSMContext):
    number = update.text.strip()

    if number == "–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥":
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()
    else:
        # ‚úÖ Save to database
        result = await delete_user_db(number)
        await update.answer(result)
        keyboard = [
        ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
        ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
        
        # ‚úÖ Clear FSM state after saving
        await state.finish()

async def exportUserData(update: types.Message):
    """ Command to trigger user data export. """
    await export_user_data(update.bot, update.chat.id)

async def changeStatus(update: types.Message):
    keyboard = [["–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤ (–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤ –ö–∏—Ç–∞–µ), –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–±—ã–ª–∏ –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 01.03.2025 - 01.04.2025", reply_markup=reply_markup)
    await Form.changeStatus.set()

async def changeStatusTrack(update: types.Message, state: FSMContext):
    date = update.text.strip()

    if date == "–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥":
        keyboard = [
        ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
        ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
        await state.finish()
    else:
        result = await update_tracking_status(date)
        await update.reply(result)
        keyboard = [
        ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
        ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
        await state.finish()

async def notify_users(update: types.Message, state: FSMContext):
    """ Trigger the notification process for arrived track codes """
    
    # ‚úÖ Pass `update.bot` to notify_users_about_arrivals
    result = await notify_users_about_arrivals(update.bot)
    
    await update.answer(result)

    # ‚úÖ Show keyboard after notifications are sent
    keyboard = [
        ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
        ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    await state.finish()

async def deleteListMessage(update: types.Message, state: FSMContext):
    keyboard = [["–û—Ç–º–µ–Ω–∞/–í—ã—Ö–æ–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ç—Ä–µ–∫-–∫–æ–¥–∞–º–∏:", reply_markup=reply_markup)
    await Form.deleteList.set()

async def deleteList(update: types.Message, state: FSMContext):
    from bot import bot  # Import bot inside function to avoid circular import

    # ‚úÖ If user sends unsupported content (photo, video, location, etc.), ignore it
    if update.content_type not in [ContentType.DOCUMENT, ContentType.TEXT]:
        print(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {update.content_type}")
        await update.reply("‚ö†Ô∏è –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
        return

    # ‚úÖ If user sends text instead of file
    if update.content_type == ContentType.TEXT:
        user_text = update.text.lower()
        print(f"üìù User sent text: {user_text}")

        if user_text == "–æ—Ç–º–µ–Ω–∞/–≤—ã—Ö–æ–¥":
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()
        else:
            await update.reply("‚ö†Ô∏è –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
        return  

    # ‚úÖ If user sends an Excel document
    document = update.document
    file_name = document.file_name.lower()
    allowed_extensions = [".xls", ".xlsx", ".csv"]

    if not any(file_name.endswith(ext) for ext in allowed_extensions):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_name}")
        await update.reply("‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xls, .xlsx, .csv). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª!")
        return  

    print(f"üìÇ Valid Excel file received: {file_name}")

    # ‚úÖ Download the file
    file_id = document.file_id
    file = await bot.get_file(file_id)

    folder_path = "temp_cargo/"
    os.makedirs(folder_path, exist_ok=True)  # Ensure folder exists
    file_path = os.path.join(folder_path, file_name)

    await bot.download_file(file.file_path, file_path)
    print(f"‚úÖ File downloaded: {file_path}")

    # ‚úÖ Process the Excel file
    try:
        extracted_data = []
        
        if file_name.endswith(".xlsx"):
            wb = load_workbook(filename=file_path, data_only=True)
            sheet = wb.active
            
            headers = [cell.value for cell in sheet[1]]  # Read first row as headers
            if "–¢—Ä–µ–∫-–∫–æ–¥—ã" not in headers or "–ö–æ–¥ –Ω–æ–º–µ—Ä" not in headers:
                await update.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Excel! –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã ‚Äò–¢—Ä–µ–∫-–∫–æ–¥—ã‚Äô –∏ ‚Äò–ö–æ–¥ –Ω–æ–º–µ—Ä‚Äô.")
                return
            
            track_col = headers.index("–¢—Ä–µ–∫-–∫–æ–¥—ã") + 1
            code_col = headers.index("–ö–æ–¥ –Ω–æ–º–µ—Ä") + 1
            
            for row in sheet.iter_rows(min_row=2, values_only=True):
                tracking_code = str(row[track_col - 1]).strip() if row[track_col - 1] else ""
                cargo_code = str(row[code_col - 1]).strip() if row[code_col - 1] else ""
                
                if tracking_code and cargo_code and "nan" not in tracking_code.lower():
                    match = re.match(r"^TJ-(\d+)-(\d+)$", cargo_code)
                    if match:
                        day = match.group(1)
                        arrival_date = f"{int(day):02d}.{datetime.now().month:02d}.{datetime.now().year}"
                        extracted_data.append((tracking_code, arrival_date))
            
        elif file_name.endswith(".csv"):
            with open(file_path, encoding='utf-8') as f:
                reader = csv.DictReader(f)
                if "–¢—Ä–µ–∫-–∫–æ–¥—ã" not in reader.fieldnames or "–ö–æ–¥ –Ω–æ–º–µ—Ä" not in reader.fieldnames:
                    await update.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV! –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–æ–ª–±—Ü—ã ‚Äò–¢—Ä–µ–∫-–∫–æ–¥—ã‚Äô –∏ ‚Äò–ö–æ–¥ –Ω–æ–º–µ—Ä‚Äô.")
                    return
                
                for row in reader:
                    tracking_code = row.get("–¢—Ä–µ–∫-–∫–æ–¥—ã", "").strip()
                    cargo_code = row.get("–ö–æ–¥ –Ω–æ–º–µ—Ä", "").strip()
                    
                    if tracking_code and cargo_code and "nan" not in tracking_code.lower():
                        match = re.match(r"^TJ-(\d+)-(\d+)$", cargo_code)
                        if match:
                            day = match.group(1)
                            arrival_date = f"{int(day):02d}.{datetime.now().month:02d}.{datetime.now().year}"
                            extracted_data.append((tracking_code, arrival_date))
        
        # ‚úÖ Delete records from database
        if extracted_data:
            await delete_from_db(extracted_data)
            unique_count = len(extracted_data)
            await update.reply(f"‚úÖ {unique_count} –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.")
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()
        else:
            await update.reply("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤.")
            keyboard = [
            ["üì¶ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤", "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
            ["üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤","‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤"],
            ["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ üóë"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
            await state.finish()

        # ‚úÖ Delete file after processing
        os.remove(file_path)
    
    except Exception as e:
        print(f"‚ùå Error processing Excel file: {e}")
        await update.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def contactUs(update: types.Message, state: FSMContext):
    await update.answer("üîπ–ò–Ω—Å—Ç–∞–≥–∞—Ä–∞–º: rahmonov.me‚úÖ\nüîπ–ê–¥–º–∏–Ω: @ismoil_rahmonov")
    await state.finish()
